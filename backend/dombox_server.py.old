#!/usr/bin/python3
from flup.server.fcgi import WSGIServer
import urllib.parse
import datetime
#from subprocess import call
from subprocess import Popen
import time
import os
import json
import logging
import logging.handlers
from socket import gethostname
import netifaces as ni

#TODO:This script needs www-data is in gpio group
SHUTTER_PWM_SCRIPT='/usr/bin/shutter_pwm_control.sh'
SHUTTER_RTS_SCRIPT='/usr/bin/shutter_rts_control.sh'

shutterToMotorDriver={}
shutterToMotorDriver['bedroom_camille']='1'
shutterToMotorDriver['bedroom_remi']='2'
shutterToMotorDriver['bedroom_parents']='FFFFB0'
shutterToMotorDriver['kitchen']='FFFFA0'
shutterToMotorDriver['livingRoom_east']='FFFFD0'
shutterToMotorDriver['livingRoom_west']='FFFFF0'
shutterToMotorDriver['bathroom']='FFFFC0'

AIRING_SCRIPT='/usr/bin/airing_AB400D_control.sh'
airingToID={}
airingToID['bedroom']='3'

shutterToScript={}
shutterToScript['bedroom_camille']=SHUTTER_PWM_SCRIPT
shutterToScript['bedroom_remi']=SHUTTER_PWM_SCRIPT
shutterToScript['bedroom_parents']=SHUTTER_RTS_SCRIPT
shutterToScript['kitchen']=SHUTTER_RTS_SCRIPT
shutterToScript['livingRoom_east']=SHUTTER_RTS_SCRIPT
shutterToScript['livingRoom_west']=SHUTTER_RTS_SCRIPT
shutterToScript['bathroom']=SHUTTER_RTS_SCRIPT


allowedShutterAction = ('open', 'stop', 'close', 'force_close', 'force_open')
allowedAiringAction = ('start','stop')
allowedWhat = ('top','log','temperature', 'humidity', 'pressure', 'conf', 'shutter')
allowedShutter = ('house','bedroom_camille', 'bedroom_remi','bedroom_parents','kitchen','livingRoom_east','livingRoom_west','bathroom')
allowedAiring = ('bedroom')

SHUTTER_STATUS_PREFIX='/tmp/shutter'
RECURRENT_SAMPLES_FILEPATH='/tmp/recurrent_samples'
DAYLY_SAMPLES_FILEPATH='/tmp/daily_samples'
CONFIG_FILE='/etc/domConfig'

LOG_FILE='/tmp/log_roof'
BACKEND_VERSION='0.1'
AGENT_PID_FILE='/var/run/dombox_agent.pid'
logger = logging.getLogger(__name__)
def logger_configLevel():
    try:
        configFile = open(CONFIG_FILE, 'r')
        line = configFile.readline()
        config = json.loads(line)
        if config["logLevel"] == "CRITICAL":
            loggerLevel = logging.CRITICAL
        elif config["logLevel"] == "ERROR":
            loggerLevel = logging.ERROR
        elif config["logLevel"] == "WARNING":
            loggerLevel = logging.WARNING
        elif config["logLevel"] == "INFO":
            loggerLevel = logging.INFO
        else:
            loggerLevel = logging.DEBUG
    except:
        loggerLevel=logging.DEBUG
    logger.setLevel(loggerLevel)
    logger.info(logger_configLevel.__name__+'> level:'+str(loggerLevel));
    
def logger_init():
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - webserver -%(message)s')
    handler = logging.handlers.RotatingFileHandler(LOG_FILE, maxBytes=1024*1024, backupCount=1)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger_configLevel()

        
def goodRequest(start_response):
    start_response('200 OK', [('Content-Type', 'text/json'),('Access-Control-Allow-Origin','*')])
    #('Access-Control-Allow-Origin','*')

def emptyResponse(start_response):
    start_response("204 No Content", [("Content-Type", "text/html")]) 

def badRequest(error, start_response):
    start_response(error, [("Content-Type", "text/html")])


def getTopInfo():
    host_name=''
    host_ip=''
    host_uptime=''
    try:
        host_name=gethostname()
        host_ip = ni.ifaddresses('wlan0')[ni.AF_INET][0]['addr']
        with open('/proc/uptime', 'r') as f:
            host_uptime = float(f.readline().split()[0])
        return (True,BACKEND_VERSION, host_name, host_ip, host_uptime)
    except:
        return (False,BACKEND_VERSION, host_name, host_ip, host_uptime)

def getLog():
    try:
        with open(LOG_FILE, 'r') as f:
            log = f.readlines()
        logger.debug(getLog.__name__+'>'+'success');
        return (True,log[-100:])
    except:
        logger.error(getLog.__name__+'>'+'failed');
        return (False,'failed')

def shutter_control(shutter,action):
    command=[shutterToScript[shutter], action,str(shutterToMotorDriver[shutter])]
    logger.debug(shutter_control.__name__+'>'+str(command));
    Popen(command)

def shutter_house_control(action):
    room_list = list(shutterToScript.keys())
    for room in room_list:
        command=[shutterToScript[room], action,str(shutterToMotorDriver[room])]
        logger.debug(shutter_house_control.__name__+'>'+str(command));
        shutter_process=Popen(command)
        retVal=shutter_process.wait()
        time.sleep(2)

def airing_control(action,airing):
    command=[AIRING_SCRIPT, action,str(airingToID[airing])]
    logger.debug(airing_control.__name__+'>'+str(command));
    Popen(command)
    
def shutter_status(shutter):
    try:
        with open(SHUTTER_STATUS_PREFIX+str(shutterToMotorDriver[shutter]), 'r')  as f:
            status = f.readline()[:-1]
    except:
        logger.error(shutter_status.__name__+'>'+'unknown');
        return (False,'unknown')
    logger.debug(shutter_status.__name__+'>'+str(status));
    return (True,status)

def processGETData(what,step):
    timestamp = []
    temperature1 = []
    temperature2 = []
    temperature3 = []
    humidity1 = []
    humidity2 = []
    pressure = []
    shutter1 = []
    shutter2 = []

    logger.debug(processGETData.__name__+'>'+str(what)+';'+str(step));
    try:
        if step == 'hour':
            samplesFile = open(RECURRENT_SAMPLES_FILEPATH, 'r')
        elif step == 'day':
            samplesFile = open(DAYLY_SAMPLES_FILEPATH, 'r')
        else:
            return (False, timestamp,temperature1,temperature2,temperature3,humidity1,humidity2, pressure, shutter1,shutter2)

        for line in samplesFile.readlines():
            samples = json.loads(line)
            timestamp.append(samples[0])
            if what  == 'temperature':
                temperature1.append(samples[1][1])
                temperature2.append(samples[2][1])
                temperature3.append(samples[3][0])
            elif what  == 'humidity':
                humidity1.append(samples[1][0])
                humidity2.append(samples[2][0])
            elif what  == 'pressure':
                pressure.append(samples[3][1])
            elif what  == 'shutter':
                shutter1.append(samples[4][0])
                shutter2.append(samples[4][1])
    except:
        samplesFile.close()
        return (False, timestamp,temperature1,temperature2,temperature3,humidity1,humidity2, pressure, shutter1,shutter2)

    samplesFile.close()
    return (True, timestamp,temperature1,temperature2,temperature3,humidity1,humidity2, pressure, shutter1,shutter2)

def processGETConf():
    try:
        configFile = open(CONFIG_FILE, 'r') 
        conf=configFile.read()
        configFile.close()
    except:
        logger.error(processGETData.__name__+'>'+str((False,'error')));
        return (False,'error')
    logger.debug(processGETData.__name__+'>'+str((True,conf)));
    return (True,conf)

def processPOSTConf(environ):
    try:
        post_data_size = int(environ.get('CONTENT_LENGTH', 0))
    except ValueError:
        logger.debug(processPOSTConf.__name__+'>'+'ValueError');
        return False
    
    confBytes = environ['wsgi.input'].read(post_data_size)
    conf = confBytes.decode('utf-8')
#    conf = environ['wsgi.input'].read(post_data_size)
    logger.debug(processPOSTConf.__name__+'>'+conf);
#    try:
    configFile = open(CONFIG_FILE, 'w+') 
    configFile.write(conf)
    configFile.close()
#    except:
#        logger.error(processPOSTConf.__name__+'>'+'Error');
#        return False
    logger_configLevel()
    return True

def clearLog():
    logger.debug(clearLog.__name__+'>'+'init');
    try:
        with open(LOG_FILE, 'w'):
            pass
    except:
        logger.error(clearLog.__name__+'>'+'Error');
        return False
    logger.debug(clearLog.__name__+'>'+'Success');
    return True

def serve(environ, start_response):
    try:
        typeRequest = environ.get('REQUEST_METHOD')
    except ValueError:
        typeRequest =''
    # and typeRequest != 'POST':
    if typeRequest != 'GET' and typeRequest != 'POST': 
        badRequest('501 Unavailable',start_response)
        return ('&nbsp;')
    param = urllib.parse.parse_qs(environ["QUERY_STRING"])
    logger.debug(serve.__name__+'>'+typeRequest+ ';'+str(param));

    if 'what' in param :
        what = param['what'][0]
    else:
        what = None

    if 'step' in param :
        step = param['step'][0]
    else:
        step = None

    if 'shutter' in param :
        shutter = param['shutter'][0]
    else:
        shutter = None
    if 'airing' in param :
        airing = param['airing'][0]
    else:
        airing = None

    if 'action'  in param:
        action = param['action'][0]
    else:
        action = None


    if (what is None and shutter is None and airing is None):
        badRequest("400 Bad Request",start_response)
        return ('&nbsp;')

    if shutter:
        if typeRequest == 'POST' and action in allowedShutterAction and shutter in allowedShutter:
            goodRequest(start_response)
            if shutter == 'house':
              shutter_house_control(action)
            else:
              shutter_control(shutter,action)
            return ('&nbsp;')
        elif typeRequest == 'GET' and shutter in allowedShutter:
            (result,status) = shutter_status(shutter)
            if result == True:
                goodRequest(start_response)
                return status
        badRequest('512 Unavailable',start_response)
        return ('&nbsp;')
    elif airing:
        if typeRequest == 'POST' and action in allowedAiringAction and airing in allowedAiring:
            goodRequest(start_response)
            airing_control(action,airing)
            return ('&nbsp;')
        badRequest('512 Unavailable',start_response)
        return ('&nbsp;')
    elif what:
        if typeRequest == 'POST':
            result=False
            if what =='conf':
                result = processPOSTConf(environ)
            elif what =='log':
                result = clearLog()
            if result == True:
                goodRequest(start_response)
            else:
                badRequest('505 Unavailable',start_response)
            return ('&nbsp;')
        elif what not in allowedWhat:
            badRequest('507 Unavailable',start_response)
            return ('&nbsp;')
        #        if typeRequest == 'GET': ?
        elif what == 'top':
            (result,BACKEND_VERSION, host_name, host_ip, host_uptime) = getTopInfo()
            if result is False:
                badRequest('502 Unavailable',start_response)
                return ('&nbsp;')
            else:
                goodRequest(start_response)
                return json.dumps((BACKEND_VERSION, host_name, host_ip, host_uptime))
        elif what == 'log':
            (result,log) = getLog()
            if result is False:
                badRequest('502 Unavailable',start_response)
                return ('&nbsp;')
            else:
                goodRequest(start_response)
#                return ("\n".join(log))
                return (log)
        elif what == 'conf':
            (result,conf) = processGETConf()
            if result is False:
                badRequest('503 Unavailable',start_response)
                return ('&nbsp;')
            goodRequest(start_response)
            return (conf)

        if step is None:
            badRequest('511 Unavailable',start_response)
            return ('&nbsp;')
            
        (dataResult,timestamp,temperature1,temperature2,temperature3,humidity1,humidity2, pressure, shutter1,shutter2) = processGETData(what,step)
        if dataResult is False:
            badRequest('508 Unavailable',start_response)
            return ('&nbsp;')
        goodRequest(start_response)
        if what  == 'temperature':
            logger.debug(serve.__name__+'>'+str((timestamp,temperature1,temperature2,temperature3)));
            return json.dumps((timestamp,temperature1,temperature2,temperature3))
        elif what  == 'humidity':
            logger.debug(serve.__name__+'>'+str((timestamp,humidity1,humidity2)));
            return json.dumps((timestamp,humidity1,humidity2))
        elif what  == 'pressure':
            logger.debug(serve.__name__+'>'+str((timestamp,pressure)));
            return json.dumps((timestamp,pressure))
        elif what  == 'shutter':
            logger.debug(serve.__name__+'>'+str((timestamp,shutter1, shutter2)));
            return json.dumps((timestamp,shutter1, shutter2))
            
if __name__ == '__main__':
    logger_init()
    WSGIServer(serve).run()
