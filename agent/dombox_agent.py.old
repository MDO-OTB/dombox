#!/usr/bin/python3

import signal
import sys
import schedule
from subprocess import Popen,call, PIPE
import time
import json
import os.path, time
import Adafruit_DHT
#import Adafruit_BMP.BMP085 as BMP085
from collections import deque
import os
import logging
import logging.handlers
import pyinotify
import threading


def touch(fname, times=None):
    with open(fname, 'a'):
        os.utime(fname, times)

class Shutter():
    #TODO:This script needs www-data is in gpio group
    SHUTTER_PWM_SCRIPT='/usr/bin/shutter_pwm_control.sh'
    SHUTTER_RTS_SCRIPT='/usr/bin/shutter_rts_control.sh'
    SHUTTER_STATUS_PREFIX='/tmp/shutter'
    
    roomLookupTable={}
    roomLookupTable['bedroom_camille']=('2', SHUTTER_PWM_SCRIPT)
    roomLookupTable['bedroom_remi']=('1', SHUTTER_PWM_SCRIPT)
    roomLookupTable['bedroom_parents']=('FFFFB0', SHUTTER_RTS_SCRIPT)
    roomLookupTable['kitchen']=('FFFFA0', SHUTTER_RTS_SCRIPT)
    roomLookupTable['livingRoom_east']=('FFFFD0', SHUTTER_RTS_SCRIPT)
    roomLookupTable['livingRoom_west']=('FFFFF0', SHUTTER_RTS_SCRIPT)
    roomLookupTable['bathroom']=('FFFFC0', SHUTTER_RTS_SCRIPT)

    shutterStatusToValue={}
    shutterStatusToValue['unknown']=-1
    shutterStatusToValue['closed']=0
    shutterStatusToValue['closing']=1
    shutterStatusToValue['opening']=2
    shutterStatusToValue['opened']=3
    
    @staticmethod
    def get_status(motorDriver):
        try:
            with open(Shutter.SHUTTER_STATUS_PREFIX+str(motorDriver), 'r')  as f:
                statusString = f.readline()[:-1]
            status = Shutter.shutterStatusToValue[statusString]
        except:
            return -1
        return status

    @staticmethod
    def control(roomName,action):
        command=[Shutter.roomLookupTable[roomName][1], action,Shutter.roomLookupTable[roomName][0]]
    #unblocking to allow action 'stop'
        Popen(command,close_fds=False)
#blocking
#    shutter_process=Popen(command)
#    retVal=shutter_process.wait()

class Airing():
    AIRING_SCRIPT='/usr/bin/airing_AB400D_control.sh'
    airingToID={}
    airingToID['bedroom']='3'

    @staticmethod
    def control(action,roomName):
        command=[Airing.AIRING_SCRIPT, action,str(Airing.airingToID[roomName])]
        Popen(command)

class Alarm():
    ALARM_SCRIPT='/usr/bin/alarm_AB400D_control.sh'
    ALARM_ID='1'

    @staticmethod
    def dingdong():
        command=[Alarm.ALARM_SCRIPT, "start",Alarm.ALARM_ID]
        Popen(command)

class Sensor():
    AM2302_1_PIN='P9_12'
    AM2302_2_PIN='P9_23'
    BMP085_BUS=2
    BMP085_command=["/root/bmp280/bmp280"]
    AM2302_sensor = Adafruit_DHT.AM2302
    #BMP085_sensor = BMP085.BMP085(busnum=Sensor.BMP085_BUS, mode=BMP085.BMP085_ULTRAHIGHRES)

    @staticmethod
    def bmp280_get():
    #unblocking to allow action 'stop'
        bmp280_process=Popen(Sensor.BMP085_command, stdout=PIPE, stderr=PIPE,universal_newlines=True)
        stdout, stderr = bmp280_process.communicate()
        samples=json.loads(stdout);
        return (samples["Pressure"],samples["Temperature"])

    @staticmethod
    def AM2302_1_get():
        Adafruit_DHT.read_retry(Sensor.AM2302_sensor, Sensor.AM2302_1_PIN)

    @staticmethod
    def AM2302_2_get():
        Adafruit_DHT.read_retry(Sensor.AM2302_sensor, Sensor.AM2302_2_PIN)

class Config():
    def __init__(self,pathname):
        self.mutex = threading.Lock()
        self.pathname = pathname
        self.load()

    def __str__(self):
        self.acquire()
        out = 'measureEnabled: ' + str(self.measureEnabled) + '\n'
        out += 'SAMPLES_DELAY: ' + str(self.SAMPLES_DELAY)  + '\n'
        out += 'SAMPLES_MAX: ' + str(self.SAMPLES_MAX)  + '\n'
        out += 'DAYLY_SAMPLES_HOURS: ' + str(self.DAYLY_SAMPLES_HOURS)  + '\n'
        out += 'DAYLY_SAMPLES_MAX: ' + str(self.DAYLY_SAMPLES_MAX)  + '\n'
        out += 'timeControlShutter: ' + str(self.timeControlShutter)  + '\n'
        out += 'timeControlAiring: ' + str(self.timeControlAiring)  + '\n'
        out += 'tempControlShutter: ' + str(self.tempControlShutter)  + '\n'
        out += 'roofOpenHour: ' + self.roofOpenHour  + '\n'
        out += 'roofCloseHour: ' + self.roofCloseHour  + '\n'
        out += 'kitchenOpenHour: ' + self.kitchenOpenHour  + '\n'
        out += 'kitchenCloseHour: ' + self.kitchenCloseHour  + '\n'
        out += 'bathroomOpenHour: ' + self.bathroomOpenHour  + '\n'
        out += 'bathroomCloseHour: ' + self.bathroomCloseHour  + '\n'
        out += 'bedroomOpenHour: ' + self.bedroomOpenHour  + '\n'
        out += 'bedroomCloseHour: ' + self.bedroomCloseHour  + '\n'
        out += 'livingRoomEastOpenHour: ' + self.livingRoomEastOpenHour  + '\n'
        out += 'livingRoomEastCloseHour: ' + self.livingRoomEastCloseHour  + '\n'
        out += 'livingRoomWestOpenHour: ' + self.livingRoomWestOpenHour  + '\n'
        out += 'livingRoomWestCloseHour: ' + self.livingRoomWestCloseHour  + '\n'
        out += 'airingRoomStartHour: ' + self.airingRoomStartHour  + '\n'
        out += 'airingRoomStopHour: ' + self.airingRoomStopHour  + '\n'
        out += 'alarmEnabled: ' + str(self.alarmEnabled)  + '\n'
        out += 'alarmHour: ' + self.alarmHour  + '\n'
        out += 'self.logLevel: ' + str(self.logLevel) + '\n'
        self.release()
        return out

    def load(self):
        configFile = open(self.pathname, 'r')
        line = configFile.readline()
        config = json.loads(line)
        configFile.close()
        self.acquire()
        self.SAMPLES_DELAY=config["delayMeasure"]
        self.SAMPLES_MAX=config["maxSamples"]
        self.DAYLY_SAMPLES_HOURS=int(round(24/config["maxDailySamplesADay"]))
        self.DAYLY_SAMPLES_MAX=config["maxDailySamples"]
        self.measureEnabled = config["measureEnabled"]
        
        self.tempControlShutter = config["tempControlShutter"]
        if self.tempControlShutter:
            try:
                self.tempMaxThresholdOpen=config["tempMaxThresholdOpen"]
                self.tempMinThresholdOpen=config["tempMinThresholdOpen"]
                self.tempMaxThresholdClose=config["tempMaxThresholdClose"]
                self.tempMinThresholdClose=config["tempMinThresholdClose"]
            except:
                print("Failed to configure temperatur for opening or closing shutter")
                self.tempControlShutter = False
            
        self.timeControlShutter = config["timeControlShutter"]
        if self.timeControlShutter:
            try:
                self.roofOpenHour = "%02d:%02d" % (config["roofOpenHour"], config["roofOpenMinute"])
                self.roofCloseHour = "%02d:%02d" % (config["roofCloseHour"], config["roofCloseMinute"])
                self.kitchenOpenHour = "%02d:%02d" % (config["kitchenOpenHour"], config["kitchenOpenMinute"])
                self.kitchenCloseHour = "%02d:%02d" % (config["kitchenCloseHour"], config["kitchenCloseMinute"])
                self.bathroomOpenHour = "%02d:%02d" % (config["bathroomOpenHour"], config["bathroomOpenMinute"])
                self.bathroomCloseHour = "%02d:%02d" % (config["bathroomCloseHour"], config["bathroomCloseMinute"])
                self.bedroomOpenHour = "%02d:%02d" % (config["bedroomOpenHour"], config["bedroomOpenMinute"])
                self.bedroomCloseHour = "%02d:%02d" % (config["bedroomCloseHour"], config["bedroomCloseMinute"])
                self.livingRoomEastOpenHour = "%02d:%02d" % (config["livingRoomEastOpenHour"], config["livingRoomEastOpenMinute"])
                self.livingRoomEastCloseHour = "%02d:%02d" % (config["livingRoomEastCloseHour"], config["livingRoomEastCloseMinute"])
                self.livingRoomWestOpenHour = "%02d:%02d" % (config["livingRoomWestOpenHour"], config["livingRoomWestOpenMinute"])
                self.livingRoomWestCloseHour = "%02d:%02d" % (config["livingRoomWestCloseHour"], config["livingRoomWestCloseMinute"])
            except:
                print("Failed to configure opening or closing timetable fot shutter.")
                self.timeControlShutter = False
                            
        self.timeControlAiring = config["timeControlAiring"]
        if self.timeControlAiring:
            try:
                self.airingRoomStartHour = "%02d:%02d" % (config["airingRoomStartHour"], config["airingRoomStartHour"])
                self.airingRoomStopHour = "%02d:%02d" % (config["airingRoomStopHour"], config["airingRoomStopMinute"])
            except:
                print("Failed to configure opening or closing timetable for airing.")
                self.timeControlAiring = False

        self.alarmEnabled = config["alarm"]
        if self.alarmEnabled:
            try:
                self.alarmHour = "%02d:%02d" % (config["alarmHour"], config["alarmMinute"])
            except:
                print("Failed to configure opening or closing timetable for alarm.S")
                self.alarmEnabled = False
        try:
            if config["logLevel"] == "CRITICAL":
                self.logLevel  = logging.CRITICAL
            elif config["logLevel"] == "ERROR":
                self.logLevel  = logging.ERROR
            elif config["logLevel"] == "WARNING":
                self.logLevel  = logging.WARNING
            elif config["logLevel"] == "INFO":
                self.logLevel  = logging.INFO
            elif config["logLevel"] == "DEBUG":
                self.logLevel  = logging.DEBUG
            else:
                print("Failed to configure logger level.")
                self.logLevel  = logging.DEBUG
        except:
            loggerLevel=logging.DEBUG
  
        self.release()
        print(self)

    def acquire(self):
        self.mutex.acquire()

    def release(self):
        self.mutex.release()
            
class Agent(pyinotify.ProcessEvent):
    RECURRENT_SAMPLES_FILEPATH='/tmp/recurrent_samples'
    DAYLY_SAMPLES_FILEPATH='/tmp/daily_samples'
    CONFIG_FILE='/etc/domConfig'
    PID_FILE='/var/run/dombox_agent.pid'
    SCHEDULE_QUANTUM=60
    LOG_FILE='/tmp/log_roof'
    firstPrintDone=False
    jobs = []
            
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.loopCounter = -1
        self.dayly_done = False
        touch(Agent.RECURRENT_SAMPLES_FILEPATH)
        touch(Agent.DAYLY_SAMPLES_FILEPATH)
        self.all_jobs=[]
#        signal.signal(signal.SIGUSR1, self.reconfig) #replaced by inotify
        PIDFile = open(self.PID_FILE, 'w+') 
        PIDFile.write(str(os.getpid()))
        PIDFile.close()
        self.conf = Config(Agent.CONFIG_FILE)
        self.logger_init()
        self.measure()
        self.scheduleJobs()
        self.monitorConfig()
        self.run()

    def logger_configLevel(self):
        self.conf.acquire()
        self.logger.setLevel(self.conf.logLevel)
        self.conf.release()
        self.logger.info(self.logger_configLevel.__name__+'> level:'+str(self.conf.logLevel));
        
    def logger_init(self):
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - agent - %(message)s')
        handler = logging.handlers.RotatingFileHandler(self.LOG_FILE, maxBytes=1024*1024, backupCount=1)
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger_configLevel()

    def reconfig(self,signum=None, frame=None):
        self.logger.debug(self.reconfig.__name__+'>');
        oldLogLevel = self.conf.logLevel;
        self.conf.load()
        if oldLogLevel != self.conf.logLevel:
            self.logger_configLevel()
        schedule.clear()
        self.scheduleJobs()

    def process_IN_CLOSE_WRITE(self, event):
        self.reconfig()
        
    def monitorConfig(self):
        wm = pyinotify.WatchManager()
        notifier = pyinotify.ThreadedNotifier(wm,self)
        notifier.start()
        wm.add_watch(Agent.CONFIG_FILE, pyinotify.IN_CLOSE_WRITE)
        
    def measure(self):
        struct_time=time.localtime()
        t = int(round(time.mktime(struct_time)))
        try:
            #AM2302_1_humidity, AM2302_1_temperature = Sensor.AM2302_1_get()
            AM2302_1_humidity = 0
            AM2302_1_temperature = 0

        except:
            AM2302_1_humidity = 0
            AM2302_1_temperature = 0

        if AM2302_1_humidity is None:
            AM2302_1_humidity = 0

        if AM2302_1_temperature is None:
            AM2302_1_temperature = 0
        
        try:
            #AM2302_2_humidity, AM2302_2_temperature = Sensor.AM2302_2_get()
            AM2302_2_humidity = 0
            AM2302_2_temperature = 0

        except:
            AM2302_2_humidity = 0
            AM2302_2_temperature = 0

        if AM2302_2_humidity is None:
            AM2302_2_humidity = 0

        if AM2302_2_temperature is None:
            AM2302_2_temperature = 0
    
        (BMP280_pressure, BMP280_temperature) = Sensor.bmp280_get()
    
#        try:
#            (BMP280_pressure, BMP280_temperature) = Sensor.bmp280_get()
#        except:
#            BMP280_temperature = 0
#            BMP280_pressure = 0

        #try:
        #    BMP085_temperature = self.BMP085_sensor.read_temperature()
        #except:
        #    BMP085_temperature = 0
        
        #try:
        #    BMP085_pressure = self.BMP085_sensor.read_pressure()
        #except:
        #    BMP085_pressure = 0
            
        shutter1 = Shutter.get_status(1)
        shutter2 = Shutter.get_status(2)
        
        samples =(t, (round(AM2302_1_humidity,2),round(AM2302_1_temperature,2)), (round(AM2302_2_humidity,2),round(AM2302_2_temperature,2)),(round(BMP280_temperature,2), int(BMP280_pressure)),(shutter1,shutter2) )
        samples_json = json.dumps(samples)
        if self.firstPrintDone is False:
            print(str(samples))
            self.firstPrintDone = True
        
        with open(Agent.RECURRENT_SAMPLES_FILEPATH) as f:
            buffer = deque(f, maxlen=self.conf.SAMPLES_MAX)
        buffer.append(samples_json + '\n')
        with open(Agent.RECURRENT_SAMPLES_FILEPATH, 'w') as f:
            f.writelines(buffer)
        self.logger.debug(self.measure.__name__+'> recurrent done');
        if (struct_time.tm_hour % self.conf.DAYLY_SAMPLES_HOURS) == 0 and self.dayly_done == False: 
            with open(Agent.DAYLY_SAMPLES_FILEPATH) as f:
                buffer = deque(f, maxlen=self.conf.DAYLY_SAMPLES_MAX)
            buffer.append(samples_json + '\n')
            with open(Agent.DAYLY_SAMPLES_FILEPATH, 'w') as f:
                f.writelines(buffer)
            self.dayly_done=True
            self.logger.debug(self.measure.__name__+'> daily done');
        elif (struct_time.tm_hour % self.conf.DAYLY_SAMPLES_HOURS) != 0:
            self.dayly_done=False
        
        self.conf.acquire()
        if self.conf.tempControlShutter:
            if AM2302_2_temperature > self.conf.tempMaxThresholdOpen:
                self.logger.info(self.measure.__name__+'> '+str(AM2302_2_temperature)+'C >'+str(self.conf.tempMaxThresholdOpen)+'C open shutters');
                self.openRoofShutter()
            if AM2302_2_temperature < self.conf.tempMinThresholdOpen:
                self.logger.info(self.measure.__name__+'> '+str(AM2302_2_temperature)+'C <'+str(self.conf.tempMinThresholdOpen)+'C open shutters');
                self.openRoofShutter()
            if AM2302_2_temperature > self.conf.tempMaxThresholdClose:
                self.logger.info(self.measure.__name__+'> '+str(AM2302_2_temperature)+'C >'+str(self.conf.tempMaxThresholdClose)+'C close shutters');
                self.closeRoofShutter()
            if AM2302_2_temperature < self.conf.tempMinThresholdClose:
                self.logger.info(self.measure.__name__+'> '+str(AM2302_2_temperature)+'C <'+str(self.conf.tempMinThresholdClose)+'C close shutters');
                self.closeRoofShutter()
        self.conf.release()

    def startAiring(self):
        self.logger.info(self.openRoofShutter.__name__+'>');
        Airing.control('start','bedroom')

    def stopAiring(self):
        self.logger.info(self.closeRoofShutter.__name__+'>');
        Airing.control('stop','bedroom')
        
    def actionShutter(action, room):
        self.logger.info(self.actionShutter.__name__+'>'action+'>'+room);
        Shutter.control(room, action)
        
    def openRoofShutter(self):
        self.logger.info(self.openRoofShutter.__name__+'>');
        Shutter.control('bedroom_camille','open')
        Shutter.control('bedroom_remi','open')

    def closeRoofShutter(self):
        self.logger.info(self.closeRoofShutter.__name__+'>');
        Shutter.control('bedroom_camille','close')
        Shutter.control('bedroom_remi','close')

    def openKitchenShutter(self):
        self.logger.info(self.openKitchenShutter.__name__+'>');
        Shutter.control('kitchen','open')

    def closeKitchenShutter(self):
        self.logger.info(self.closeKitchenShutter.__name__+'>');
        Shutter.control('kitchen','close')

    def openBathroomShutter(self):
        self.logger.info(self.openBathroomShutter.__name__+'>');
        Shutter.control('bathroom','open')

    def closeBathroomShutter(self):
        self.logger.info(self.closeBathroomShutter.__name__+'>');
        Shutter.control('bathroom','close')

    def openBedroomShutter(self):
        self.logger.info(self.openBedroomShutter.__name__+'>');
        Shutter.control('bedroom_parents','open')

    def closeBedroomShutter(self):
        self.logger.info(self.closeBedroomShutter.__name__+'>');
        Shutter.control('bedroom_parents','close')

    def openLivingRoomEastShutter(self):
        self.logger.info(self.openLivingRoomEastShutter.__name__+'>');
        Shutter.control('livingRoom_east','open')

    def closeLivingRoomEastShutter(self):
        self.logger.info(self.closeLivingRoomEastShutter.__name__+'>');
        Shutter.control('livingRoom_east','close')

    def openLivingRoomWestShutter(self):
        self.logger.info(self.openLivingRoomWestShutter.__name__+'>');
        Shutter.control('livingRoom_west','open')

    def closeLivingRoomWestShutter(self):
        self.logger.info(self.closeLivingRoomWestShutter.__name__+'>');
        Shutter.control('livingRoom_west','close')

    def printSamples(self):
        samples = []
        print('Recurrent samples : ')
        samplesFile = open(RECURRENT_SAMPLES_FILEPATH, 'r')
        for line in samplesFile.readlines():
            samples.append(json.loads(line))
        print(json.dumps(samples))

        print('Daily samples : ')
        samplesFile = open(DAYLY_SAMPLES_FILEPATH, 'r')
        for line in samplesFile.readlines():
            samples.append(json.loads(line))
        print(json.dumps(samples))

    def scheduleJobs(self):
        self.conf.acquire()
        if self.conf.measureEnabled:
            schedule.every(self.conf.SAMPLES_DELAY).seconds.do(self.measure)
        
        if self.conf.timeControlAiring:
            schedule.every().day.at(self.conf.airingRoomStartHour).do(self.startAiring)
            schedule.every().day.at(self.conf.airingRoomStopHour).do(self.stopAiring)
        
        if self.conf.alarmEnabled:
            schedule.every().day.at(self.conf.alarmHour).do(Alarm.dingdong)
        
        if self.conf.timeControlShutter:
            
            Shutter.control('bedroom_camille','open')
        Shutter.control('bedroom_remi','open')
            schedule.every().day.at(self.conf.roofOpenHour).do(self.openRoofShutter)
            schedule.every().day.at(self.conf.roofCloseHour).do(self.closeRoofShutter)

            schedule.every().day.at(self.conf.kitchenOpenHour).do(self.openKitchenShutter)
            schedule.every().day.at(self.conf.kitchenCloseHour).do(self.closeKitchenShutter)

            schedule.every().day.at(self.conf.bathroomOpenHour).do(self.openBathroomShutter)
            schedule.every().day.at(self.conf.bathroomCloseHour).do(self.closeBathroomShutter)

            schedule.every().day.at(self.conf.bedroomOpenHour).do(self.openBedroomShutter)
            schedule.every().day.at(self.conf.bedroomCloseHour).do(self.closeBedroomShutter)

            schedule.every().day.at(self.conf.livingRoomEastOpenHour).do(self.openLivingRoomEastShutter)
            schedule.every().day.at(self.conf.livingRoomEastCloseHour).do(self.closeLivingRoomEastShutter)

            schedule.every().day.at(self.conf.livingRoomWestOpenHour).do(self.openLivingRoomWestShutter)
            schedule.every().day.at(self.conf.livingRoomWestCloseHour).do(self.closeLivingRoomWestShutter)
        self.conf.release()

    def run(self):
        while True:
            schedule.run_pending()
            time.sleep(Agent.SCHEDULE_QUANTUM)
    
if __name__ == '__main__':
    C = Agent()

    
